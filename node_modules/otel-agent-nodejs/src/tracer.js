const { NodeSDK } = require('@opentelemetry/sdk-node');
const { loadInstrumentations } = require('./instrumentations');
const { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-proto');
const { OTLPMetricExporter } = require('@opentelemetry/exporter-metrics-otlp-proto');
const { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');
const { Resource } = require('@opentelemetry/resources');
const { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');
const { setupContext } = require('./context');

async function startTracing() {
  // Configura recursos comuns como service name, ambiente, etc.
  const resource = new Resource({
    [SemanticResourceAttributes.SERVICE_NAME]: process.env.SERVICE_NAME || 'default-service',
    [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.DEPLOYMENT_ENVIRONMENT || 'development',
  });

  // Configura o SDK do Node.js para métricas e tracing
  const sdk = new NodeSDK({
    resource,
    traceExporter: new OTLPTraceExporter({
      url: process.env.OTLP_TRACE_URL || 'http://otel-collector:4318/v1/traces'
    }),
    metricReader: new PeriodicExportingMetricReader({
      exporter: new OTLPMetricExporter({
        url: process.env.OTLP_METRIC_URL || 'http://otel-collector:4318/v1/metrics'
      })
    }),
    instrumentations: loadInstrumentations()  // Carrega todas as instrumentações
  });

  // Configura contextos globais, como baggage e propagadores
  setupContext();

  // Inicia o SDK, que inicializa a captura de métricas e tracing
  await sdk.start();
}

module.exports = { startTracing };
