const { NodeSDK } = require("@opentelemetry/sdk-node");
const {
  getNodeAutoInstrumentations,
} = require("@opentelemetry/auto-instrumentations-node");
const {
  OTLPTraceExporter,
} = require("@opentelemetry/exporter-trace-otlp-proto");
const {
  OTLPMetricExporter,
} = require("@opentelemetry/exporter-metrics-otlp-proto");
const { PeriodicExportingMetricReader } = require("@opentelemetry/sdk-metrics");
const { propagation, context } = require("@opentelemetry/api");
const { Resource } = require("@opentelemetry/resources");
const {
  SemanticResourceAttributes,
} = require("@opentelemetry/semantic-conventions");

const resource = new Resource({
  [SemanticResourceAttributes.SERVICE_NAME]:
    process.env.SERVICE_NAME || "default-service",
  [SemanticResourceAttributes.SERVICE_VERSION]:
    process.env.SERVICE_VERSION || "1.0.0",
  [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]:
    process.env.DEPLOYMENT_ENVIRONMENT || "development",
});

const sdk = new NodeSDK({
  resource,
  traceExporter: new OTLPTraceExporter({
    url:
      process.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||
      "http://otel-collector:4318/v1/traces",
  }),
  metricReader: new PeriodicExportingMetricReader({
    exporter: new OTLPMetricExporter({
      url:
        process.env.OTEL_EXPORTER_OTLP_METRICS_ENDPOINT ||
        "http://otel-collector:4318/v1/metrics",
    }),
  }),
  instrumentations: [
    getNodeAutoInstrumentations({
      "@opentelemetry/instrumentation-fs": {
        enabled: false,
      },
      "@opentelemetry/instrumentation-express": {
        enabled: true,
      },
      "@opentelemetry/instrumentation-http": {
        enabled: true,
        requestHook: (span, req) => {
          span.setAttribute("http.method", req.method);
          span.setAttribute("http.url", req.url);
          if (req.headers["user-agent"]) {
            span.setAttribute("http.user_agent", req.headers["user-agent"]);
          }
          if (req.headers["referer"]) {
            span.setAttribute("http.referer", req.headers["referer"]);
          }
          if (req.headers["x-forwarded-for"]) {
            span.setAttribute("http.client_ip", req.headers["x-forwarded-for"]);
          } else if (req.socket && req.socket.remoteAddress) {
            span.setAttribute("http.client_ip", req.socket.remoteAddress);
          }
          span.setAttribute("http.query_params", req.url.split("?")[1] || "");
        },
        responseHook: (span, res) => {
          span.setAttribute("http.status_code", res.statusCode);
          span.setAttribute(
            "http.response_time",
            Date.now() - span.startTime[0]
          );
        },
      },
    }),
  ],
});

sdk.start();
